section .data
    prompt1 db "Enter first number: ", 0
    prompt2 db "Enter second number: ", 0
    prompt_op db "Enter operation (+, -, *, /): ", 0
    result_msg db "Result: ", 0
    newline db 0xA, 0

section .bss
    num1 resb 10      ; buffer for first number
    num2 resb 10      ; buffer for second number
    operator resb 2   ; buffer for operator
    result resb 10    ; buffer for result (string)

section .text
    global _start

_start:
    ; Prompt for first number
    mov eax, 4          ; syscall: sys_write
    mov ebx, 1          ; file descriptor: stdout
    mov ecx, prompt1    ; message to print
    mov edx, 18         ; message length
    int 0x80            ; call kernel

    ; Read first number
    mov eax, 3          ; syscall: sys_read
    mov ebx, 0          ; file descriptor: stdin
    mov ecx, num1       ; buffer to store input
    mov edx, 10         ; max input length
    int 0x80            ; call kernel

    ; Convert first number from string to integer
    mov eax, [num1]
    sub eax, '0'        ; convert ASCII to integer
    mov [num1], eax

    ; Prompt for operator
    mov eax, 4          ; syscall: sys_write
    mov ebx, 1          ; file descriptor: stdout
    mov ecx, prompt_op  ; message to print
    mov edx, 32         ; message length
    int 0x80            ; call kernel

    ; Read operator
    mov eax, 3          ; syscall: sys_read
    mov ebx, 0          ; file descriptor: stdin
    mov ecx, operator   ; buffer to store input
    mov edx, 2          ; read one character for operator
    int 0x80            ; call kernel

    ; Prompt for second number
    mov eax, 4          ; syscall: sys_write
    mov ebx, 1          ; file descriptor: stdout
    mov ecx, prompt2    ; message to print
    mov edx, 19         ; message length
    int 0x80            ; call kernel

    ; Read second number
    mov eax, 3          ; syscall: sys_read
    mov ebx, 0          ; file descriptor: stdin
    mov ecx, num2       ; buffer to store input
    mov edx, 10         ; max input length
    int 0x80            ; call kernel

    ; Convert second number from string to integer
    mov eax, [num2]
    sub eax, '0'        ; convert ASCII to integer
    mov [num2], eax

    ; Perform operation based on the operator
    mov eax, [num1]     ; load first number into eax
    mov ebx, [num2]     ; load second number into ebx

    cmp byte [operator], '+'    ; check if the operator is '+'
    je add_numbers
    cmp byte [operator], '-'    ; check if the operator is '-'
    je sub_numbers
    cmp byte [operator], '*'    ; check if the operator is '*'
    je mul_numbers
    cmp byte [operator], '/'    ; check if the operator is '/'
    je div_numbers

    ; Addition
add_numbers:
    add eax, ebx
    jmp print_result

    ; Subtraction
sub_numbers:
    sub eax, ebx
    jmp print_result

    ; Multiplication
mul_numbers:
    imul ebx
    jmp print_result

    ; Division
div_numbers:
    xor edx, edx         ; clear edx for division
    div ebx              ; eax = eax / ebx, remainder in edx
    jmp print_result

    ; Print the result
print_result:
    ; Convert result from integer to string (naive approach)
    add eax, '0'          ; convert result to ASCII character

    ; Print result message
    mov [result], eax     ; store result in buffer
    mov eax, 4            ; syscall: sys_write
    mov ebx, 1            ; file descriptor: stdout
    mov ecx, result_msg   ; message to print
    mov edx, 8            ; message length
    int 0x80              ; call kernel

    ; Print result
    mov eax, 4            ; syscall: sys_write
    mov ebx, 1            ; file descriptor: stdout
    mov ecx, result       ; print the result
    mov edx, 1            ; result length (1 digit)
    int 0x80              ; call kernel

    ; Print newline
    mov eax, 4            ; syscall: sys_write
    mov ebx, 1            ; file descriptor: stdout
    mov ecx, newline      ; print a newline
    mov edx, 1
    int 0x80              ; call kernel

    ; Exit program
    mov eax, 1            ; syscall: sys_exit
    xor ebx, ebx          ; return code 0
    int 0x80              ; call kernel
